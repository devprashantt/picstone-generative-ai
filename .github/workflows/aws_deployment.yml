name: Push to ci-dev

on:
  push:
    branches:
      - ci-dev

jobs:
  push-to-main:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Node.js
        
        uses: actions/setup-node@v3
        with:
          node-version: 20  # Adjust to your Node.js version

      - name: Install dependencies in the cloned repository
        working-directory: ./client
        run: npm install

      - name: Remove current front end env if it exists
        working-directory: ./client
        run: |
          if [ -f .env ]; then
            rm .env
          fi
      
      - name: Create back end .env file
        env:
          ENV_FILE: ${{ secrets.ENV_FILE_FE }}
        run: |
          echo "$ENV_FILE" > ./client/.env

      - name: Run npm build in the cloned repository
        working-directory: ./client
        run: npm run build  # Adjust to your build command
        env:
          CI : false
      
      - name: Remove existing content in server/assets
        run: rm -rf server/assets/*

      - name: Copy files from client/dist/assets to server/assets
        run: cp -R client/dist/assets/. server/assets

      - name: Remove existing index.html from server/templates
        run: rm -f server/templates/index.html

      - name: Copy index.html from client/dist to server/templates
        run: cp client/dist/index.html server/templates/index.html

      - name: remove assets from client
        run: rm -r client/dist/assets
      
      - name: Copy files from dist to static
        run: cp -R client/dist/. server/static
        
      - name: Create back end .env file
        env:
          ENV_FILE: ${{ secrets.ENV_FILE_BE }}
        run: |
          echo "$ENV_FILE" > ./server/.env

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true

      - name: Build, tag, and push the image to Amazon ECR
        working-directory: ./server
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: my-containers
          IMAGE_TAG: latest
        run: |
          # Build a docker container and push it to ECR 
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"